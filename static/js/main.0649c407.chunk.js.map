{"version":3,"sources":["components/MovieCard.js","components/Loading.js","images/Appleseed_Alpha.jpg","images/Final_Fantasy_Spirits_Within.jpg","images/Ghost_In_The_Shell_2_0.jpg","services/movieData.js","images/Kingsglaive_Final_Fantasy_XV.jpg","images/Resident_Evil_Vendetta.jpg","services/movieAPI.js","pages/MovieList.js","pages/NotFound.js","pages/MovieDetails.js","components/MovieForm.js","pages/EditMovie.js","pages/NewMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","id","title","storyline","imagePath","className","src","alt","to","React","Component","Loading","movies","subtitle","rating","bookmarked","genre","FinalF","Ghost","Appleseed","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","List","bind","state","loading","a","rende","setState","NotFound","MovieDetails","Delet","shouldRedirect","match","params","movieAPI","onClick","MovieForm","handleSubmit","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","EditMovie","NewMovie","redirect","App","path","component","exact","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0649c407.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../CssComponents/MovieCard.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { id,\n      title,\n      storyline,\n      imagePath,\n    } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-container\">\n        <img src={ imagePath } alt=\"foto do filme\" />\n        <h3 id=\"movie-card-title\"> { title } </h3>\n        <p id=\"movie-card-storyline\"> { storyline } </p>\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.exact({\n    imagePath: PropTypes.string,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","export default __webpack_public_path__ + \"static/media/Appleseed_Alpha.30ae10ef.jpg\";","export default __webpack_public_path__ + \"static/media/Final_Fantasy_Spirits_Within.b8097429.jpg\";","export default __webpack_public_path__ + \"static/media/Ghost_In_The_Shell_2_0.2cabe5f9.jpg\";","import Appleseed from '../images/Appleseed_Alpha.jpg';\nimport FinalF from '../images/Final_Fantasy_Spirits_Within.jpg';\nimport Ghost from '../images/Ghost_In_The_Shell_2_0.jpg';\nimport Kingsglaive from '../images/Kingsglaive_Final_Fantasy_XV.jpg';\nimport Resident from '../images/Resident_Evil_Vendetta.jpg';\n\nconst movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: Kingsglaive,\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: FinalF,\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: Ghost,\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: Appleseed,\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: Resident,\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","export default __webpack_public_path__ + \"static/media/Kingsglaive_Final_Fantasy_XV.ec78b774.jpg\";","export default __webpack_public_path__ + \"static/media/Resident_Evil_Vendetta.ffeb1d1b.jpg\";","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n    this.List = this.List.bind(this);\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.List();\n  }\n\n  async List() {\n    const rende = await movieAPI.getMovies();\n    this.setState({\n      movies: rende,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    if (loading === true) return <Loading />;\n    return (\n      <div data-testid=\"movie-list\" id=\"movie-list-container\">\n        {movies.map((movie) => (\n          <MovieCard key={ movie.title } movie={ movie } />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nimport '../CssComponents/MovieDetails.css';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.List = this.List.bind(this);\n    this.Delet = this.Delet.bind(this);\n    this.state = {\n      movie: {},\n      loading: true,\n      shouldRedirect: false,\n    };\n  }\n\n  componentDidMount() {\n    this.List();\n  }\n\n  async List() {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n    const rende = await movieAPI.getMovie(id);\n    this.setState({ loading: false, movie: rende });\n  }\n\n  async Delet() {\n    const { match: { params: { id } } } = this.props;\n    await movieAPI.deleteMovie(id);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { movie, loading, shouldRedirect } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n    if (loading) return <Loading />;\n    return (\n      <div data-testid=\"movie-details\" id=\"MovieDetailsContainer\">\n        <img id=\"MovieDetailsImg\" alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <h1 id=\"MovieDetailsTitle\">{ `${title}` }</h1>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p id=\"MovieDetailsStoryline\">{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <div>\n          <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <br />\n          <Link to=\"/ProjectMovieCrud\">VOLTAR</Link>\n        </div>\n        <Link to=\"/ProjectMovieCrud\" onClick={ this.Delet }>DELETAR</Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  storyline: PropTypes.string,\n  genre: PropTypes.string,\n  rating: PropTypes.number,\n  id: PropTypes.number,\n}.isRequired;\n\nexport default MovieDetails;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../CssComponents/EditMovie.css\";\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div id=\"MovieTitleContainer\">\n        Title\n        <label htmlFor=\"movie_title\">\n          <br />\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={title}\n            onChange={(event) => this.updateMovie(\"title\", event.target.value)}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div id=\"MovieSubTitleContainer\">\n        Subtitle\n        <label htmlFor=\"movie_subtitle\">\n          <br />\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={subtitle}\n            onChange={(event) =>\n              this.updateMovie(\"subtitle\", event.target.value)\n            }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\" id=\"MovieImageContainer\">\n        Image\n        <label htmlFor=\"movie_image\">\n          <br />\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={imagePath}\n            onChange={(event) =>\n              this.updateMovie(\"imagePath\", event.target.value)\n            }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div id=\"MovieTextAreaContainer\">\n        Synopsis\n        <label htmlFor=\"movie_storyline\">\n          <br />\n          <textarea\n            id=\"movie_storyline\"\n            value={storyline}\n            onChange={(event) =>\n              this.updateMovie(\"storyline\", event.target.value)\n            }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div id=\"MovieSelectContainer\">\n        Gênre\n        <label htmlFor=\"movie_genre\">\n          <br />\n          <select\n            id=\"movie_genre\"\n            value={genre}\n            onChange={(event) => this.updateMovie(\"genre\", event.target.value)}\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div id=\"MovieRatingContainer\">\n        Rating\n        <label htmlFor=\"movie_rating\">\n          <br />\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={0.1}\n            min={0}\n            max={5}\n            value={rating}\n            onChange={(event) => this.updateMovie(\"rating\", event.target.value)}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button id=\"buttonSubmit\" type=\"button\" onClick={this.handleSubmit}>\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nimport '../CssComponents/EditMovie.css';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.List = this.List.bind(this);\n    this.state = {\n      loading: true,\n      movie: {},\n      shouldRedirect: false,\n    };\n  }\n\n  componentDidMount() {\n    this.List();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  async List() {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n    const rende = await movieAPI.getMovie(id);\n    this.setState({ loading: false, movie: rende });\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/ProjectMovieCrud\" />;\n    if (loading) return <Loading />;\n    return (\n      <div data-testid=\"edit-movie\" id=\"EditMovieContainer\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nimport '../CssComponents/NewMovie.css';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      redirect: false,\n    };\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const { redirect } = this.state;\n    if (redirect) return <Redirect to=\"/ProjectMovieCrud\" />;\n    return (\n      <div data-testid=\"new-movie\" id=\"NewMovieContainer\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport NotFound from './pages/NotFound';\nimport MovieDetails from './pages/MovieDetails';\nimport EditMovie from './pages/EditMovie';\nimport NewMovie from './pages/NewMovie';\nimport './CssComponents/App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div id=\"app-js-container\">\n        <BrowserRouter>\n          <span id=\"AddCard\">\n            <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n          </span>\n          <Switch>\n            <Route path=\"/movies/new\" component={ NewMovie } />\n            <Route exact path=\"/ProjectMovieCrud\" component={ MovieList } />\n            <Route\n              exact\n              path=\"/movies/:id/edit\"\n              render={ (props) => <EditMovie { ...props } /> }\n            />\n            <Route\n              path=\"/movies/:id\"\n              render={ (props) => <MovieDetails { ...props } /> }\n            />\n            <Route path=\"\" component={ NotFound } />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}